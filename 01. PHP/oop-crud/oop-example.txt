<?php
// Abstract class (Data Abstraction)
abstract class Vehicle {
    protected $brand; // Encapsulation (protected property)

    public function __construct($brand) {
        $this->brand = $brand;
    }

    // Abstract method (must be implemented in child classes)
    abstract public function startEngine();
}

// Child class extending Vehicle (Inheritance)
class Car extends Vehicle {
    private $model; // Encapsulation (private property)

    public function __construct($brand, $model) {
        parent::__construct($brand);
        $this->model = $model;
    }

    // Polymorphism: Overriding the startEngine method
    public function startEngine() {
        return "Starting the engine of $this->brand $this->model";
    }
}

// Another child class
class Motorcycle extends Vehicle {
    public function startEngine() {
        return "Revving up the $this->brand motorcycle";
    }
}

// Creating objects
$car = new Car("Toyota", "Corolla");
$bike = new Motorcycle("Harley-Davidson");

echo $car->startEngine() . "<br>"; // Polymorphism: Calls Car's startEngine
echo $bike->startEngine(); // Polymorphism: Calls Motorcycle's startEngine
?>
